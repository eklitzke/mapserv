#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Order(object):
  ASC = 1
  DESC = 2

class Equality(object):
  EQ = 1
  NEQ = 2
  LT = 3
  LTE = 4
  GT = 5
  GTE = 6

class Column(object):
  """
  Attributes:
   - table
   - name
   - spatial
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'table', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.BOOL, 'spatial', None, None, ), # 3
  )

  def __init__(self, table=None, name=None, spatial=None,):
    self.table = table
    self.name = name
    self.spatial = spatial

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.spatial = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Column')
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 1)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.spatial != None:
      oprot.writeFieldBegin('spatial', TType.BOOL, 3)
      oprot.writeBool(self.spatial)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Target(object):
  """
  Attributes:
   - col
   - ival
   - fval
   - sval
   - nullity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'col', (Column, Column.thrift_spec), None, ), # 1
    (2, TType.I64, 'ival', None, None, ), # 2
    (3, TType.DOUBLE, 'fval', None, None, ), # 3
    (4, TType.STRING, 'sval', None, None, ), # 4
    (5, TType.BOOL, 'nullity', None, None, ), # 5
  )

  def __init__(self, col=None, ival=None, fval=None, sval=None, nullity=None,):
    self.col = col
    self.ival = ival
    self.fval = fval
    self.sval = sval
    self.nullity = nullity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.col = Column()
          self.col.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ival = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.fval = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sval = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.nullity = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Target')
    if self.col != None:
      oprot.writeFieldBegin('col', TType.STRUCT, 1)
      self.col.write(oprot)
      oprot.writeFieldEnd()
    if self.ival != None:
      oprot.writeFieldBegin('ival', TType.I64, 2)
      oprot.writeI64(self.ival)
      oprot.writeFieldEnd()
    if self.fval != None:
      oprot.writeFieldBegin('fval', TType.DOUBLE, 3)
      oprot.writeDouble(self.fval)
      oprot.writeFieldEnd()
    if self.sval != None:
      oprot.writeFieldBegin('sval', TType.STRING, 4)
      oprot.writeString(self.sval)
      oprot.writeFieldEnd()
    if self.nullity != None:
      oprot.writeFieldBegin('nullity', TType.BOOL, 5)
      oprot.writeBool(self.nullity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EqComparison(object):
  """
  Attributes:
   - eq
   - lhs
   - rhs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'eq', None, None, ), # 1
    (2, TType.STRUCT, 'lhs', (Target, Target.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'rhs', (Target, Target.thrift_spec), None, ), # 3
  )

  def __init__(self, eq=None, lhs=None, rhs=None,):
    self.eq = eq
    self.lhs = lhs
    self.rhs = rhs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.eq = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.lhs = Target()
          self.lhs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.rhs = Target()
          self.rhs.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EqComparison')
    if self.eq != None:
      oprot.writeFieldBegin('eq', TType.I32, 1)
      oprot.writeI32(self.eq)
      oprot.writeFieldEnd()
    if self.lhs != None:
      oprot.writeFieldBegin('lhs', TType.STRUCT, 2)
      self.lhs.write(oprot)
      oprot.writeFieldEnd()
    if self.rhs != None:
      oprot.writeFieldBegin('rhs', TType.STRUCT, 3)
      self.rhs.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NullComparison(object):
  """
  Attributes:
   - col
   - isnull
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'col', (Column, Column.thrift_spec), None, ), # 1
    (2, TType.BOOL, 'isnull', None, None, ), # 2
  )

  def __init__(self, col=None, isnull=None,):
    self.col = col
    self.isnull = isnull

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.col = Column()
          self.col.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.isnull = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NullComparison')
    if self.col != None:
      oprot.writeFieldBegin('col', TType.STRUCT, 1)
      self.col.write(oprot)
      oprot.writeFieldEnd()
    if self.isnull != None:
      oprot.writeFieldBegin('isnull', TType.BOOL, 2)
      oprot.writeBool(self.isnull)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InComparison(object):
  """
  Attributes:
   - lhs
   - targets
   - notin
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'lhs', (Target, Target.thrift_spec), None, ), # 1
    (2, TType.LIST, 'targets', (TType.STRUCT,(Target, Target.thrift_spec)), None, ), # 2
    (3, TType.BOOL, 'notin', None, None, ), # 3
  )

  def __init__(self, lhs=None, targets=None, notin=None,):
    self.lhs = lhs
    self.targets = targets
    self.notin = notin

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.lhs = Target()
          self.lhs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.targets = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = Target()
            _elem5.read(iprot)
            self.targets.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.notin = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InComparison')
    if self.lhs != None:
      oprot.writeFieldBegin('lhs', TType.STRUCT, 1)
      self.lhs.write(oprot)
      oprot.writeFieldEnd()
    if self.targets != None:
      oprot.writeFieldBegin('targets', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.targets))
      for iter6 in self.targets:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.notin != None:
      oprot.writeFieldBegin('notin', TType.BOOL, 3)
      oprot.writeBool(self.notin)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Comparison(object):
  """
  Attributes:
   - eqcomp
   - nullcomp
   - incomp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'eqcomp', (EqComparison, EqComparison.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'nullcomp', (NullComparison, NullComparison.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'incomp', (InComparison, InComparison.thrift_spec), None, ), # 3
  )

  def __init__(self, eqcomp=None, nullcomp=None, incomp=None,):
    self.eqcomp = eqcomp
    self.nullcomp = nullcomp
    self.incomp = incomp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.eqcomp = EqComparison()
          self.eqcomp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.nullcomp = NullComparison()
          self.nullcomp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.incomp = InComparison()
          self.incomp.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Comparison')
    if self.eqcomp != None:
      oprot.writeFieldBegin('eqcomp', TType.STRUCT, 1)
      self.eqcomp.write(oprot)
      oprot.writeFieldEnd()
    if self.nullcomp != None:
      oprot.writeFieldBegin('nullcomp', TType.STRUCT, 2)
      self.nullcomp.write(oprot)
      oprot.writeFieldEnd()
    if self.incomp != None:
      oprot.writeFieldBegin('incomp', TType.STRUCT, 3)
      self.incomp.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OrderClause(object):
  """
  Attributes:
   - col
   - order
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'col', (Column, Column.thrift_spec), None, ), # 1
    (2, TType.I32, 'order', None, None, ), # 2
  )

  def __init__(self, col=None, order=None,):
    self.col = col
    self.order = order

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.col = Column()
          self.col.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.order = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OrderClause')
    if self.col != None:
      oprot.writeFieldBegin('col', TType.STRUCT, 1)
      self.col.write(oprot)
      oprot.writeFieldEnd()
    if self.order != None:
      oprot.writeFieldBegin('order', TType.I32, 2)
      oprot.writeI32(self.order)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryClause(object):
  """
  Attributes:
   - table
   - exprs
   - orderby
   - offset
   - limit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'table', None, None, ), # 1
    (2, TType.LIST, 'exprs', (TType.STRUCT,(Comparison, Comparison.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'orderby', (TType.STRUCT,(OrderClause, OrderClause.thrift_spec)), None, ), # 3
    (4, TType.I32, 'offset', None, None, ), # 4
    (5, TType.I32, 'limit', None, None, ), # 5
  )

  def __init__(self, table=None, exprs=None, orderby=None, offset=None, limit=None,):
    self.table = table
    self.exprs = exprs
    self.orderby = orderby
    self.offset = offset
    self.limit = limit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.table = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.exprs = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Comparison()
            _elem12.read(iprot)
            self.exprs.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.orderby = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = OrderClause()
            _elem18.read(iprot)
            self.orderby.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryClause')
    if self.table != None:
      oprot.writeFieldBegin('table', TType.STRING, 1)
      oprot.writeString(self.table)
      oprot.writeFieldEnd()
    if self.exprs != None:
      oprot.writeFieldBegin('exprs', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.exprs))
      for iter19 in self.exprs:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.orderby != None:
      oprot.writeFieldBegin('orderby', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.orderby))
      for iter20 in self.orderby:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.offset != None:
      oprot.writeFieldBegin('offset', TType.I32, 4)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.limit != None:
      oprot.writeFieldBegin('limit', TType.I32, 5)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

