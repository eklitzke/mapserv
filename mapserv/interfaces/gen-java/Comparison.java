/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Comparison implements TBase, java.io.Serializable, Cloneable, Comparable<Comparison> {
  private static final TStruct STRUCT_DESC = new TStruct("Comparison");
  private static final TField EQCOMP_FIELD_DESC = new TField("eqcomp", TType.STRUCT, (short)1);
  private static final TField NULLCOMP_FIELD_DESC = new TField("nullcomp", TType.STRUCT, (short)2);
  private static final TField INCOMP_FIELD_DESC = new TField("incomp", TType.STRUCT, (short)3);

  public EqComparison eqcomp;
  public static final int EQCOMP = 1;
  public NullComparison nullcomp;
  public static final int NULLCOMP = 2;
  public InComparison incomp;
  public static final int INCOMP = 3;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(EQCOMP, new FieldMetaData("eqcomp", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, EqComparison.class)));
    put(NULLCOMP, new FieldMetaData("nullcomp", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, NullComparison.class)));
    put(INCOMP, new FieldMetaData("incomp", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, InComparison.class)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Comparison.class, metaDataMap);
  }

  public Comparison() {
  }

  public Comparison(
    EqComparison eqcomp,
    NullComparison nullcomp,
    InComparison incomp)
  {
    this();
    this.eqcomp = eqcomp;
    this.nullcomp = nullcomp;
    this.incomp = incomp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Comparison(Comparison other) {
    if (other.isSetEqcomp()) {
      this.eqcomp = new EqComparison(other.eqcomp);
    }
    if (other.isSetNullcomp()) {
      this.nullcomp = new NullComparison(other.nullcomp);
    }
    if (other.isSetIncomp()) {
      this.incomp = new InComparison(other.incomp);
    }
  }

  @Override
  public Comparison clone() {
    return new Comparison(this);
  }

  public EqComparison getEqcomp() {
    return this.eqcomp;
  }

  public Comparison setEqcomp(EqComparison eqcomp) {
    this.eqcomp = eqcomp;
    return this;
  }

  public void unsetEqcomp() {
    this.eqcomp = null;
  }

  // Returns true if field eqcomp is set (has been asigned a value) and false otherwise
  public boolean isSetEqcomp() {
    return this.eqcomp != null;
  }

  public void setEqcompIsSet(boolean value) {
    if (!value) {
      this.eqcomp = null;
    }
  }

  public NullComparison getNullcomp() {
    return this.nullcomp;
  }

  public Comparison setNullcomp(NullComparison nullcomp) {
    this.nullcomp = nullcomp;
    return this;
  }

  public void unsetNullcomp() {
    this.nullcomp = null;
  }

  // Returns true if field nullcomp is set (has been asigned a value) and false otherwise
  public boolean isSetNullcomp() {
    return this.nullcomp != null;
  }

  public void setNullcompIsSet(boolean value) {
    if (!value) {
      this.nullcomp = null;
    }
  }

  public InComparison getIncomp() {
    return this.incomp;
  }

  public Comparison setIncomp(InComparison incomp) {
    this.incomp = incomp;
    return this;
  }

  public void unsetIncomp() {
    this.incomp = null;
  }

  // Returns true if field incomp is set (has been asigned a value) and false otherwise
  public boolean isSetIncomp() {
    return this.incomp != null;
  }

  public void setIncompIsSet(boolean value) {
    if (!value) {
      this.incomp = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case EQCOMP:
      if (value == null) {
        unsetEqcomp();
      } else {
        setEqcomp((EqComparison)value);
      }
      break;

    case NULLCOMP:
      if (value == null) {
        unsetNullcomp();
      } else {
        setNullcomp((NullComparison)value);
      }
      break;

    case INCOMP:
      if (value == null) {
        unsetIncomp();
      } else {
        setIncomp((InComparison)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case EQCOMP:
      return getEqcomp();

    case NULLCOMP:
      return getNullcomp();

    case INCOMP:
      return getIncomp();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case EQCOMP:
      return isSetEqcomp();
    case NULLCOMP:
      return isSetNullcomp();
    case INCOMP:
      return isSetIncomp();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Comparison)
      return this.equals((Comparison)that);
    return false;
  }

  public boolean equals(Comparison that) {
    if (that == null)
      return false;

    boolean this_present_eqcomp = true && this.isSetEqcomp();
    boolean that_present_eqcomp = true && that.isSetEqcomp();
    if (this_present_eqcomp || that_present_eqcomp) {
      if (!(this_present_eqcomp && that_present_eqcomp))
        return false;
      if (!this.eqcomp.equals(that.eqcomp))
        return false;
    }

    boolean this_present_nullcomp = true && this.isSetNullcomp();
    boolean that_present_nullcomp = true && that.isSetNullcomp();
    if (this_present_nullcomp || that_present_nullcomp) {
      if (!(this_present_nullcomp && that_present_nullcomp))
        return false;
      if (!this.nullcomp.equals(that.nullcomp))
        return false;
    }

    boolean this_present_incomp = true && this.isSetIncomp();
    boolean that_present_incomp = true && that.isSetIncomp();
    if (this_present_incomp || that_present_incomp) {
      if (!(this_present_incomp && that_present_incomp))
        return false;
      if (!this.incomp.equals(that.incomp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Comparison other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Comparison typedOther = (Comparison)other;

    lastComparison = Boolean.valueOf(isSetEqcomp()).compareTo(isSetEqcomp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(eqcomp, typedOther.eqcomp);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetNullcomp()).compareTo(isSetNullcomp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(nullcomp, typedOther.nullcomp);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIncomp()).compareTo(isSetIncomp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(incomp, typedOther.incomp);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case EQCOMP:
          if (field.type == TType.STRUCT) {
            this.eqcomp = new EqComparison();
            this.eqcomp.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NULLCOMP:
          if (field.type == TType.STRUCT) {
            this.nullcomp = new NullComparison();
            this.nullcomp.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCOMP:
          if (field.type == TType.STRUCT) {
            this.incomp = new InComparison();
            this.incomp.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.eqcomp != null) {
      if (isSetEqcomp()) {
        oprot.writeFieldBegin(EQCOMP_FIELD_DESC);
        this.eqcomp.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.nullcomp != null) {
      if (isSetNullcomp()) {
        oprot.writeFieldBegin(NULLCOMP_FIELD_DESC);
        this.nullcomp.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.incomp != null) {
      if (isSetIncomp()) {
        oprot.writeFieldBegin(INCOMP_FIELD_DESC);
        this.incomp.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Comparison(");
    boolean first = true;

    if (isSetEqcomp()) {
      sb.append("eqcomp:");
      if (this.eqcomp == null) {
        sb.append("null");
      } else {
        sb.append(this.eqcomp);
      }
      first = false;
    }
    if (isSetNullcomp()) {
      if (!first) sb.append(", ");
      sb.append("nullcomp:");
      if (this.nullcomp == null) {
        sb.append("null");
      } else {
        sb.append(this.nullcomp);
      }
      first = false;
    }
    if (isSetIncomp()) {
      if (!first) sb.append(", ");
      sb.append("incomp:");
      if (this.incomp == null) {
        sb.append("null");
      } else {
        sb.append(this.incomp);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

