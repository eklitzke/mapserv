/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Target implements TBase, java.io.Serializable, Cloneable, Comparable<Target> {
  private static final TStruct STRUCT_DESC = new TStruct("Target");
  private static final TField COL_FIELD_DESC = new TField("col", TType.STRUCT, (short)1);
  private static final TField IVAL_FIELD_DESC = new TField("ival", TType.I64, (short)2);
  private static final TField FVAL_FIELD_DESC = new TField("fval", TType.DOUBLE, (short)3);
  private static final TField SVAL_FIELD_DESC = new TField("sval", TType.STRING, (short)4);
  private static final TField NULLITY_FIELD_DESC = new TField("nullity", TType.BOOL, (short)5);

  public Column col;
  public static final int COL = 1;
  public long ival;
  public static final int IVAL = 2;
  public double fval;
  public static final int FVAL = 3;
  public String sval;
  public static final int SVAL = 4;
  public boolean nullity;
  public static final int NULLITY = 5;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean ival = false;
    public boolean fval = false;
    public boolean nullity = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(COL, new FieldMetaData("col", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, Column.class)));
    put(IVAL, new FieldMetaData("ival", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    put(FVAL, new FieldMetaData("fval", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.DOUBLE)));
    put(SVAL, new FieldMetaData("sval", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    put(NULLITY, new FieldMetaData("nullity", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Target.class, metaDataMap);
  }

  public Target() {
  }

  public Target(
    Column col,
    long ival,
    double fval,
    String sval,
    boolean nullity)
  {
    this();
    this.col = col;
    this.ival = ival;
    this.__isset.ival = true;
    this.fval = fval;
    this.__isset.fval = true;
    this.sval = sval;
    this.nullity = nullity;
    this.__isset.nullity = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Target(Target other) {
    if (other.isSetCol()) {
      this.col = new Column(other.col);
    }
    __isset.ival = other.__isset.ival;
    this.ival = other.ival;
    __isset.fval = other.__isset.fval;
    this.fval = other.fval;
    if (other.isSetSval()) {
      this.sval = other.sval;
    }
    __isset.nullity = other.__isset.nullity;
    this.nullity = other.nullity;
  }

  @Override
  public Target clone() {
    return new Target(this);
  }

  public Column getCol() {
    return this.col;
  }

  public Target setCol(Column col) {
    this.col = col;
    return this;
  }

  public void unsetCol() {
    this.col = null;
  }

  // Returns true if field col is set (has been asigned a value) and false otherwise
  public boolean isSetCol() {
    return this.col != null;
  }

  public void setColIsSet(boolean value) {
    if (!value) {
      this.col = null;
    }
  }

  public long getIval() {
    return this.ival;
  }

  public Target setIval(long ival) {
    this.ival = ival;
    this.__isset.ival = true;
    return this;
  }

  public void unsetIval() {
    this.__isset.ival = false;
  }

  // Returns true if field ival is set (has been asigned a value) and false otherwise
  public boolean isSetIval() {
    return this.__isset.ival;
  }

  public void setIvalIsSet(boolean value) {
    this.__isset.ival = value;
  }

  public double getFval() {
    return this.fval;
  }

  public Target setFval(double fval) {
    this.fval = fval;
    this.__isset.fval = true;
    return this;
  }

  public void unsetFval() {
    this.__isset.fval = false;
  }

  // Returns true if field fval is set (has been asigned a value) and false otherwise
  public boolean isSetFval() {
    return this.__isset.fval;
  }

  public void setFvalIsSet(boolean value) {
    this.__isset.fval = value;
  }

  public String getSval() {
    return this.sval;
  }

  public Target setSval(String sval) {
    this.sval = sval;
    return this;
  }

  public void unsetSval() {
    this.sval = null;
  }

  // Returns true if field sval is set (has been asigned a value) and false otherwise
  public boolean isSetSval() {
    return this.sval != null;
  }

  public void setSvalIsSet(boolean value) {
    if (!value) {
      this.sval = null;
    }
  }

  public boolean isNullity() {
    return this.nullity;
  }

  public Target setNullity(boolean nullity) {
    this.nullity = nullity;
    this.__isset.nullity = true;
    return this;
  }

  public void unsetNullity() {
    this.__isset.nullity = false;
  }

  // Returns true if field nullity is set (has been asigned a value) and false otherwise
  public boolean isSetNullity() {
    return this.__isset.nullity;
  }

  public void setNullityIsSet(boolean value) {
    this.__isset.nullity = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case COL:
      if (value == null) {
        unsetCol();
      } else {
        setCol((Column)value);
      }
      break;

    case IVAL:
      if (value == null) {
        unsetIval();
      } else {
        setIval((Long)value);
      }
      break;

    case FVAL:
      if (value == null) {
        unsetFval();
      } else {
        setFval((Double)value);
      }
      break;

    case SVAL:
      if (value == null) {
        unsetSval();
      } else {
        setSval((String)value);
      }
      break;

    case NULLITY:
      if (value == null) {
        unsetNullity();
      } else {
        setNullity((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COL:
      return getCol();

    case IVAL:
      return new Long(getIval());

    case FVAL:
      return new Double(getFval());

    case SVAL:
      return getSval();

    case NULLITY:
      return new Boolean(isNullity());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case COL:
      return isSetCol();
    case IVAL:
      return isSetIval();
    case FVAL:
      return isSetFval();
    case SVAL:
      return isSetSval();
    case NULLITY:
      return isSetNullity();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Target)
      return this.equals((Target)that);
    return false;
  }

  public boolean equals(Target that) {
    if (that == null)
      return false;

    boolean this_present_col = true && this.isSetCol();
    boolean that_present_col = true && that.isSetCol();
    if (this_present_col || that_present_col) {
      if (!(this_present_col && that_present_col))
        return false;
      if (!this.col.equals(that.col))
        return false;
    }

    boolean this_present_ival = true && this.isSetIval();
    boolean that_present_ival = true && that.isSetIval();
    if (this_present_ival || that_present_ival) {
      if (!(this_present_ival && that_present_ival))
        return false;
      if (this.ival != that.ival)
        return false;
    }

    boolean this_present_fval = true && this.isSetFval();
    boolean that_present_fval = true && that.isSetFval();
    if (this_present_fval || that_present_fval) {
      if (!(this_present_fval && that_present_fval))
        return false;
      if (this.fval != that.fval)
        return false;
    }

    boolean this_present_sval = true && this.isSetSval();
    boolean that_present_sval = true && that.isSetSval();
    if (this_present_sval || that_present_sval) {
      if (!(this_present_sval && that_present_sval))
        return false;
      if (!this.sval.equals(that.sval))
        return false;
    }

    boolean this_present_nullity = true && this.isSetNullity();
    boolean that_present_nullity = true && that.isSetNullity();
    if (this_present_nullity || that_present_nullity) {
      if (!(this_present_nullity && that_present_nullity))
        return false;
      if (this.nullity != that.nullity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Target other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Target typedOther = (Target)other;

    lastComparison = Boolean.valueOf(isSetCol()).compareTo(isSetCol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(col, typedOther.col);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIval()).compareTo(isSetIval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(ival, typedOther.ival);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFval()).compareTo(isSetFval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(fval, typedOther.fval);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSval()).compareTo(isSetSval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(sval, typedOther.sval);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetNullity()).compareTo(isSetNullity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(nullity, typedOther.nullity);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case COL:
          if (field.type == TType.STRUCT) {
            this.col = new Column();
            this.col.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IVAL:
          if (field.type == TType.I64) {
            this.ival = iprot.readI64();
            this.__isset.ival = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FVAL:
          if (field.type == TType.DOUBLE) {
            this.fval = iprot.readDouble();
            this.__isset.fval = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SVAL:
          if (field.type == TType.STRING) {
            this.sval = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NULLITY:
          if (field.type == TType.BOOL) {
            this.nullity = iprot.readBool();
            this.__isset.nullity = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.col != null) {
      if (isSetCol()) {
        oprot.writeFieldBegin(COL_FIELD_DESC);
        this.col.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetIval()) {
      oprot.writeFieldBegin(IVAL_FIELD_DESC);
      oprot.writeI64(this.ival);
      oprot.writeFieldEnd();
    }
    if (isSetFval()) {
      oprot.writeFieldBegin(FVAL_FIELD_DESC);
      oprot.writeDouble(this.fval);
      oprot.writeFieldEnd();
    }
    if (this.sval != null) {
      if (isSetSval()) {
        oprot.writeFieldBegin(SVAL_FIELD_DESC);
        oprot.writeString(this.sval);
        oprot.writeFieldEnd();
      }
    }
    if (isSetNullity()) {
      oprot.writeFieldBegin(NULLITY_FIELD_DESC);
      oprot.writeBool(this.nullity);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Target(");
    boolean first = true;

    if (isSetCol()) {
      sb.append("col:");
      if (this.col == null) {
        sb.append("null");
      } else {
        sb.append(this.col);
      }
      first = false;
    }
    if (isSetIval()) {
      if (!first) sb.append(", ");
      sb.append("ival:");
      sb.append(this.ival);
      first = false;
    }
    if (isSetFval()) {
      if (!first) sb.append(", ");
      sb.append("fval:");
      sb.append(this.fval);
      first = false;
    }
    if (isSetSval()) {
      if (!first) sb.append(", ");
      sb.append("sval:");
      if (this.sval == null) {
        sb.append("null");
      } else {
        sb.append(this.sval);
      }
      first = false;
    }
    if (isSetNullity()) {
      if (!first) sb.append(", ");
      sb.append("nullity:");
      sb.append(this.nullity);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

