/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class InComparison implements TBase, java.io.Serializable, Cloneable, Comparable<InComparison> {
  private static final TStruct STRUCT_DESC = new TStruct("InComparison");
  private static final TField COL_FIELD_DESC = new TField("col", TType.STRUCT, (short)1);
  private static final TField TARGETS_FIELD_DESC = new TField("targets", TType.LIST, (short)2);
  private static final TField NOTIN_FIELD_DESC = new TField("notin", TType.BOOL, (short)3);

  public Column col;
  public static final int COL = 1;
  public List<Target> targets;
  public static final int TARGETS = 2;
  public boolean notin;
  public static final int NOTIN = 3;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean notin = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(COL, new FieldMetaData("col", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Column.class)));
    put(TARGETS, new FieldMetaData("targets", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Target.class))));
    put(NOTIN, new FieldMetaData("notin", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(InComparison.class, metaDataMap);
  }

  public InComparison() {
  }

  public InComparison(
    Column col,
    List<Target> targets,
    boolean notin)
  {
    this();
    this.col = col;
    this.targets = targets;
    this.notin = notin;
    this.__isset.notin = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InComparison(InComparison other) {
    if (other.isSetCol()) {
      this.col = new Column(other.col);
    }
    if (other.isSetTargets()) {
      List<Target> __this__targets = new ArrayList<Target>();
      for (Target other_element : other.targets) {
        __this__targets.add(new Target(other_element));
      }
      this.targets = __this__targets;
    }
    __isset.notin = other.__isset.notin;
    this.notin = other.notin;
  }

  @Override
  public InComparison clone() {
    return new InComparison(this);
  }

  public Column getCol() {
    return this.col;
  }

  public InComparison setCol(Column col) {
    this.col = col;
    return this;
  }

  public void unsetCol() {
    this.col = null;
  }

  // Returns true if field col is set (has been asigned a value) and false otherwise
  public boolean isSetCol() {
    return this.col != null;
  }

  public void setColIsSet(boolean value) {
    if (!value) {
      this.col = null;
    }
  }

  public List<Target> getTargets() {
    return this.targets;
  }

  public InComparison setTargets(List<Target> targets) {
    this.targets = targets;
    return this;
  }

  public void unsetTargets() {
    this.targets = null;
  }

  // Returns true if field targets is set (has been asigned a value) and false otherwise
  public boolean isSetTargets() {
    return this.targets != null;
  }

  public void setTargetsIsSet(boolean value) {
    if (!value) {
      this.targets = null;
    }
  }

  public boolean isNotin() {
    return this.notin;
  }

  public InComparison setNotin(boolean notin) {
    this.notin = notin;
    this.__isset.notin = true;
    return this;
  }

  public void unsetNotin() {
    this.__isset.notin = false;
  }

  // Returns true if field notin is set (has been asigned a value) and false otherwise
  public boolean isSetNotin() {
    return this.__isset.notin;
  }

  public void setNotinIsSet(boolean value) {
    this.__isset.notin = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case COL:
      if (value == null) {
        unsetCol();
      } else {
        setCol((Column)value);
      }
      break;

    case TARGETS:
      if (value == null) {
        unsetTargets();
      } else {
        setTargets((List<Target>)value);
      }
      break;

    case NOTIN:
      if (value == null) {
        unsetNotin();
      } else {
        setNotin((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case COL:
      return getCol();

    case TARGETS:
      return getTargets();

    case NOTIN:
      return new Boolean(isNotin());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case COL:
      return isSetCol();
    case TARGETS:
      return isSetTargets();
    case NOTIN:
      return isSetNotin();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InComparison)
      return this.equals((InComparison)that);
    return false;
  }

  public boolean equals(InComparison that) {
    if (that == null)
      return false;

    boolean this_present_col = true && this.isSetCol();
    boolean that_present_col = true && that.isSetCol();
    if (this_present_col || that_present_col) {
      if (!(this_present_col && that_present_col))
        return false;
      if (!this.col.equals(that.col))
        return false;
    }

    boolean this_present_targets = true && this.isSetTargets();
    boolean that_present_targets = true && that.isSetTargets();
    if (this_present_targets || that_present_targets) {
      if (!(this_present_targets && that_present_targets))
        return false;
      if (!this.targets.equals(that.targets))
        return false;
    }

    boolean this_present_notin = true && this.isSetNotin();
    boolean that_present_notin = true && that.isSetNotin();
    if (this_present_notin || that_present_notin) {
      if (!(this_present_notin && that_present_notin))
        return false;
      if (this.notin != that.notin)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InComparison other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InComparison typedOther = (InComparison)other;

    lastComparison = Boolean.valueOf(isSetCol()).compareTo(isSetCol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(col, typedOther.col);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTargets()).compareTo(isSetTargets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(targets, typedOther.targets);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetNotin()).compareTo(isSetNotin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(notin, typedOther.notin);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case COL:
          if (field.type == TType.STRUCT) {
            this.col = new Column();
            this.col.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TARGETS:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.targets = new ArrayList<Target>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                Target _elem2;
                _elem2 = new Target();
                _elem2.read(iprot);
                this.targets.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIN:
          if (field.type == TType.BOOL) {
            this.notin = iprot.readBool();
            this.__isset.notin = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.col != null) {
      oprot.writeFieldBegin(COL_FIELD_DESC);
      this.col.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.targets != null) {
      oprot.writeFieldBegin(TARGETS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.targets.size()));
        for (Target _iter3 : this.targets)        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (isSetNotin()) {
      oprot.writeFieldBegin(NOTIN_FIELD_DESC);
      oprot.writeBool(this.notin);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InComparison(");
    boolean first = true;

    sb.append("col:");
    if (this.col == null) {
      sb.append("null");
    } else {
      sb.append(this.col);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targets:");
    if (this.targets == null) {
      sb.append("null");
    } else {
      sb.append(this.targets);
    }
    first = false;
    if (isSetNotin()) {
      if (!first) sb.append(", ");
      sb.append("notin:");
      sb.append(this.notin);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

