/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class QueryClause implements TBase, java.io.Serializable, Cloneable, Comparable<QueryClause> {
  private static final TStruct STRUCT_DESC = new TStruct("QueryClause");
  private static final TField TABLE_FIELD_DESC = new TField("table", TType.STRING, (short)1);
  private static final TField EXPRS_FIELD_DESC = new TField("exprs", TType.LIST, (short)2);
  private static final TField ORDERBY_FIELD_DESC = new TField("orderby", TType.STRUCT, (short)3);
  private static final TField OFFSET_FIELD_DESC = new TField("offset", TType.I32, (short)4);
  private static final TField LIMIT_FIELD_DESC = new TField("limit", TType.I32, (short)5);

  public String table;
  public static final int TABLE = 1;
  public List<Comparison> exprs;
  public static final int EXPRS = 2;
  public OrderClause orderby;
  public static final int ORDERBY = 3;
  public int offset;
  public static final int OFFSET = 4;
  public int limit;
  public static final int LIMIT = 5;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean offset = false;
    public boolean limit = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(TABLE, new FieldMetaData("table", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(EXPRS, new FieldMetaData("exprs", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Comparison.class))));
    put(ORDERBY, new FieldMetaData("orderby", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, OrderClause.class)));
    put(OFFSET, new FieldMetaData("offset", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    put(LIMIT, new FieldMetaData("limit", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(QueryClause.class, metaDataMap);
  }

  public QueryClause() {
  }

  public QueryClause(
    String table,
    List<Comparison> exprs,
    OrderClause orderby,
    int offset,
    int limit)
  {
    this();
    this.table = table;
    this.exprs = exprs;
    this.orderby = orderby;
    this.offset = offset;
    this.__isset.offset = true;
    this.limit = limit;
    this.__isset.limit = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryClause(QueryClause other) {
    if (other.isSetTable()) {
      this.table = other.table;
    }
    if (other.isSetExprs()) {
      List<Comparison> __this__exprs = new ArrayList<Comparison>();
      for (Comparison other_element : other.exprs) {
        __this__exprs.add(new Comparison(other_element));
      }
      this.exprs = __this__exprs;
    }
    if (other.isSetOrderby()) {
      this.orderby = new OrderClause(other.orderby);
    }
    __isset.offset = other.__isset.offset;
    this.offset = other.offset;
    __isset.limit = other.__isset.limit;
    this.limit = other.limit;
  }

  @Override
  public QueryClause clone() {
    return new QueryClause(this);
  }

  public String getTable() {
    return this.table;
  }

  public QueryClause setTable(String table) {
    this.table = table;
    return this;
  }

  public void unsetTable() {
    this.table = null;
  }

  // Returns true if field table is set (has been asigned a value) and false otherwise
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  public List<Comparison> getExprs() {
    return this.exprs;
  }

  public QueryClause setExprs(List<Comparison> exprs) {
    this.exprs = exprs;
    return this;
  }

  public void unsetExprs() {
    this.exprs = null;
  }

  // Returns true if field exprs is set (has been asigned a value) and false otherwise
  public boolean isSetExprs() {
    return this.exprs != null;
  }

  public void setExprsIsSet(boolean value) {
    if (!value) {
      this.exprs = null;
    }
  }

  public OrderClause getOrderby() {
    return this.orderby;
  }

  public QueryClause setOrderby(OrderClause orderby) {
    this.orderby = orderby;
    return this;
  }

  public void unsetOrderby() {
    this.orderby = null;
  }

  // Returns true if field orderby is set (has been asigned a value) and false otherwise
  public boolean isSetOrderby() {
    return this.orderby != null;
  }

  public void setOrderbyIsSet(boolean value) {
    if (!value) {
      this.orderby = null;
    }
  }

  public int getOffset() {
    return this.offset;
  }

  public QueryClause setOffset(int offset) {
    this.offset = offset;
    this.__isset.offset = true;
    return this;
  }

  public void unsetOffset() {
    this.__isset.offset = false;
  }

  // Returns true if field offset is set (has been asigned a value) and false otherwise
  public boolean isSetOffset() {
    return this.__isset.offset;
  }

  public void setOffsetIsSet(boolean value) {
    this.__isset.offset = value;
  }

  public int getLimit() {
    return this.limit;
  }

  public QueryClause setLimit(int limit) {
    this.limit = limit;
    this.__isset.limit = true;
    return this;
  }

  public void unsetLimit() {
    this.__isset.limit = false;
  }

  // Returns true if field limit is set (has been asigned a value) and false otherwise
  public boolean isSetLimit() {
    return this.__isset.limit;
  }

  public void setLimitIsSet(boolean value) {
    this.__isset.limit = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((String)value);
      }
      break;

    case EXPRS:
      if (value == null) {
        unsetExprs();
      } else {
        setExprs((List<Comparison>)value);
      }
      break;

    case ORDERBY:
      if (value == null) {
        unsetOrderby();
      } else {
        setOrderby((OrderClause)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((Integer)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TABLE:
      return getTable();

    case EXPRS:
      return getExprs();

    case ORDERBY:
      return getOrderby();

    case OFFSET:
      return new Integer(getOffset());

    case LIMIT:
      return new Integer(getLimit());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TABLE:
      return isSetTable();
    case EXPRS:
      return isSetExprs();
    case ORDERBY:
      return isSetOrderby();
    case OFFSET:
      return isSetOffset();
    case LIMIT:
      return isSetLimit();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryClause)
      return this.equals((QueryClause)that);
    return false;
  }

  public boolean equals(QueryClause that) {
    if (that == null)
      return false;

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_exprs = true && this.isSetExprs();
    boolean that_present_exprs = true && that.isSetExprs();
    if (this_present_exprs || that_present_exprs) {
      if (!(this_present_exprs && that_present_exprs))
        return false;
      if (!this.exprs.equals(that.exprs))
        return false;
    }

    boolean this_present_orderby = true && this.isSetOrderby();
    boolean that_present_orderby = true && that.isSetOrderby();
    if (this_present_orderby || that_present_orderby) {
      if (!(this_present_orderby && that_present_orderby))
        return false;
      if (!this.orderby.equals(that.orderby))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryClause other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryClause typedOther = (QueryClause)other;

    lastComparison = Boolean.valueOf(isSetTable()).compareTo(isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(table, typedOther.table);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetExprs()).compareTo(isSetExprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(exprs, typedOther.exprs);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOrderby()).compareTo(isSetOrderby());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(orderby, typedOther.orderby);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOffset()).compareTo(isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(offset, typedOther.offset);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetLimit()).compareTo(isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(limit, typedOther.limit);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TABLE:
          if (field.type == TType.STRING) {
            this.table = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXPRS:
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.exprs = new ArrayList<Comparison>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                Comparison _elem6;
                _elem6 = new Comparison();
                _elem6.read(iprot);
                this.exprs.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ORDERBY:
          if (field.type == TType.STRUCT) {
            this.orderby = new OrderClause();
            this.orderby.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OFFSET:
          if (field.type == TType.I32) {
            this.offset = iprot.readI32();
            this.__isset.offset = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIMIT:
          if (field.type == TType.I32) {
            this.limit = iprot.readI32();
            this.__isset.limit = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.table != null) {
      oprot.writeFieldBegin(TABLE_FIELD_DESC);
      oprot.writeString(this.table);
      oprot.writeFieldEnd();
    }
    if (this.exprs != null) {
      oprot.writeFieldBegin(EXPRS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.exprs.size()));
        for (Comparison _iter7 : this.exprs)        {
          _iter7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.orderby != null) {
      if (isSetOrderby()) {
        oprot.writeFieldBegin(ORDERBY_FIELD_DESC);
        this.orderby.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (isSetOffset()) {
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI32(this.offset);
      oprot.writeFieldEnd();
    }
    if (isSetLimit()) {
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(this.limit);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryClause(");
    boolean first = true;

    sb.append("table:");
    if (this.table == null) {
      sb.append("null");
    } else {
      sb.append(this.table);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exprs:");
    if (this.exprs == null) {
      sb.append("null");
    } else {
      sb.append(this.exprs);
    }
    first = false;
    if (isSetOrderby()) {
      if (!first) sb.append(", ");
      sb.append("orderby:");
      if (this.orderby == null) {
        sb.append("null");
      } else {
        sb.append(this.orderby);
      }
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetLimit()) {
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

